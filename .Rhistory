# list
l1<-list(c(1,1,1),c(1.0,2.0),c('a','b'))
l1
l1[3]
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list(l1))
l2
l2[2][2]<-null
l2[2][2]<-"null"
l2
l2<- -l2[2][1]
l2
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[3][1]<-null
l2[3][1]<-"null"
l2
l2[[3]][1]<-"null"
l2
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[[3]][1]<-"null"
l2
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[[2]][1]<-"null"
l2
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[[1]][1]<-"null"
l2
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[[1]][1]<-NULL
l2[[3]][1]<-NULL
l2
l2[[2]][1]<-NULL
l2
l3<-list(list(c(1,23,10),list('a','b')),c(4,57,89),list('a','ab','b'))
l3
# making the entire vector inside the list as NULL
l3[[1]][[1]][1]=NULL
# making the entire vector inside the list as NULL
l3[[[1]]][[1]][1]=NULL
# making the entire vector inside the list as NULL
l3[[1]][[1]][1]=NULL
l3
# making the entire vector inside the list as NULL
l3[[1]][[1]][[1]]=NULL
# making the entire vector inside the list as NULL
l3[[1]][[1]][[2]]=NULL
l3
# operators
#logical operators
a<-c(1,2,3)
b<-c(1,2,3)
a&&b
# operators
#logical operators
a<-c(1,2,3)
b<-c(4,5,6)
a&&b
# operators
#logical operators
a<-c(1,2,3)
b<-c(1,2,3)
print(a&&b)
a[1]&&b[1]
b<-c(4,2,3)
a[1]&&b[1]
# operators
#logical operators
a<-c(1,2,3)
b<-c(1,2,3)
a[1]&&b[1]
a&&b
a[[1]]&&b[[2]]
a&b
# operators
#logical operators
a<-c(1,2,3)
b<-c(4,2,3)
a&b
# operators
#logical operators
a<-c(1,2,3)
b<-c(1,2,3)
a&b
# operators
#logical operators
a<-c(1,2,3)
b<-c(1,0,3)
a&b
a|b
a->>1
a<<-1
a<<-1
b<<-1
a+b
a->>1
b<<-1
a+b
a<<-1
b<<-1
a+b
a->1
a -> 1
#miscallaneous operator
1 %in% a
a %*% b
#miscallaneous operator
1 %in% a  #checks whether the element is present in the vector
mat1<-matrix(a,nrow=2,ncol = 2,byrow = TRUE)
mat1<-matrix(a,nrow=2,ncol = 2,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=2,byrow=TRUE)
mat1%*%mat2
mat1
mat2
# operators
#logical operators
a<-c(1,2,4)
b<-c(2,4,5)
mat1<-matrix(a,nrow=2,ncol = 2,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=2,byrow=TRUE)
mat1
mat2
mat1%*%mat2
# operators
#logical operators
a<-c(1:2)
b<-c(3:4)
mat1<-matrix(a,nrow=2,ncol = 2,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=2,byrow=TRUE)
mat1
mat2
mat1%*%mat2
# operators
#logical operators
a<-c(1:10)
b<-c(21:30)
mat1<-matrix(a,nrow=2,ncol = 5,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=5,byrow=TRUE)
mat1
mat2
mat1%*%mat2
mat1<-matrix(a,nrow=2,ncol = 6,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=6,byrow=TRUE)
mat1
mat2
mat1%*%mat2
mat1%*%mat1
mat1%*%t(mat2)
f1<-factor(c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+'),a)
# factors
# create a factor for blood samples
a<-c('O+','O-','A+','A-','B+','B-','AB+','AB-')
f1<-factor(c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+'),a)
f1
f1<-factor(c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+'),a,labels = a)
f1
# factors
# create a factor for blood samples
a<-c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+')
f1<-factor(a,a,labels = a)
f1
f1<-factor(a)
f1
# factors
# create a factor for blood samples
lev<-c('A+','A-','B+','B-','O-','O+')
a<-c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+')
f1<-factor(a,levels = lev)
f1
# factors
# create a factor for blood samples
lev<-c('A+','A-','B+','B-','O-','O+')
a<-c('O+','O-','O+','O-','A+','A+','A-','B+','B-','B-','A-','AB+','AB+','AB-','AB-')
f1<-factor(a,levels = lev)
f1
# accessing data from dataset
data<-read.csv(file.choose())
data
show(data)
data
view(data)
View(data)
getwd
View(data)
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = FALSE, header = FALSE)
View(data)
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
View(data)
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = FALSE, header = FALSE)
View(data)
data
data
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
data
data
class(data$V1)
class(data$V2)
class(data$V1)
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = FALSE, header = FALSE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = TRUE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
class(data$roll_no) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
class(data$name) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
summary(data)
summary(data)
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = TRUE)
data
class(data$name)  # header = true makes the headers from the data and the accessing will be done through those names whereas in the above method, we used header=false and some random headers were given
summary(data)
table(data)
round(1.5)
table(data)
prop.table(data)
gc()
# knn algorithm
getwd()
# knn algorithm
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd)
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31]),normalize)
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
View(wbcd_n)
install.packages("class")
install.packages("gmodels")
library(class)
install.packages("caret")
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
install.packages("gmodels")
library(gmodels)
install.packages("gmodels")
library(gmodels)
install.packages("gmodels")
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
View(wbcd_n)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
library(caret)
library(gmodels)
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
confusionMatrix(aa)
install.packages("gmodels")
library(gmodels)
install.packages("gtools")
install.packages("gtools")
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=22)
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=22)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=28)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=15)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=1)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=11)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=31)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=101)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=93)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=300)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
install.packages(c("backports", "bitops", "broom", "bslib", "cachem", "cli", "colorspace", "cpp11", "crayon", "crul", "curl", "data.table", "DBI", "digest", "evaluate", "farver", "fastmap", "flextable", "gt", "highr", "htmltools", "knitr", "markdown", "NLP", "officer", "openssl", "pkgload", "ps", "ragg", "Rcpp", "reactR", "reprex", "rlang", "rmarkdown", "roxygen2", "RSQLite", "shiny", "slam", "stringi", "systemfonts", "textshaping", "tinytex", "tm", "uuid", "V8", "withr", "xfun", "XML", "xts", "yaml"))
install.packages(c("cli", "curl", "data.table"))
install.packages(c("cli", "curl", "data.table"))
install.packages(c("cli", "curl", "data.table"))
gc()
gc()
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=TRUE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
