library(caret)
confusionMatrix(aa)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:149,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
irisd<-as.data.frame(iris)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,5]
irisd_test_labels<-irisd_n[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion. this actually tells the proportion of the values present in the field
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,4]
irisd_test_labels<-irisd_n[101:150,4]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
irisd
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,5]
irisd_test_labels<-irisd_n[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,5]
irisd_test_labels<-irisd_n[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,class=irisd_train_labels,k=25)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,class=irisd_train_labels,k=5)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,5]
irisd_test_labels<-irisd_n[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,class=irisd_train_labels,k=5)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,5]
irisd_test_labels<-irisd_n[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,class=irisd_train_labels,k=30)
library(gmodels)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd[1:100,5]
irisd_test_labels<-irisd[101:150,5]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,class=irisd_train_labels,k=30)
# Load dataset
irisd <- as.data.frame(iris)
# Check structure and summarize data
str(irisd)
table(irisd$Species)
# Recode species factor
irisd$Species <- factor(irisd$Species, levels = c("setosa", "versicolor", "virginica"), labels = c("Setosa", "Versicolor", "Virginica"))
# Normalize features
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
irisd_n <- as.data.frame(lapply(irisd[1:4], normalize))
# Split data into train and test sets
irisd_train <- irisd_n[1:100, ]
irisd_test <- irisd_n[101:150, ]
# Assign labels to train and test sets
irisd_train_labels <- irisd[1:100, 5]
irisd_test_labels <- irisd[101:150, 5]
# Apply KNN
library(class)
irisd_test_pred <- knn(train = irisd_train, test = irisd_test, cl = irisd_train_labels, k = 5)
# Evaluate the model
library(gmodels)
CrossTable(x = irisd_test_labels, y = irisd_test_pred, prop.chisq = FALSE)
# Confusion Matrix
bb <- table(irisd_test_labels, irisd_test_pred)
library(caret)
confusionMatrix(bb)
CrossTable(x = irisd_test_labels, y = irisd_test_pred, prop.chisq = FALSE)
data<-read.csv("C:\lpu\5th sem\INT234\Datasets\Prostate_cancer.csv")
data<-read.csv("C://lpu//5th sem//INT234//Datasets//Prostate_cancer.csv")
data
colnames(data)
head(data)
tail(data)
View(data)
# retreiving the colnames of the data
colnames(data)
# retreiving the colnames of the data
count(colnames(data))
#changing the colnames
colnames(data)<-c("col1","col2","col3","col4","col5","col6","col7","col8","col9","col10","col11","col12","col13","col14""col15)
# loading the data
data<-read.csv("C://lpu//5th sem//INT234//Datasets//Prostate_cancer.csv")
# loading the data
data<-read.csv("C://lpu//5th sem//INT234//Datasets//Prostate_cancer.csv")
# retreiving the colnames of the data
colnames(data)
head(data)
tail(data)
#changing the colnames
colnames(data)<-c("col1","col2","col3","col4","col5","col6","col7","col8","col9","col10","col11","col12","col13","col14","col15")
colnames(data)
# retreiving the colnames of the data
colnames(data)
#subsetting the data
sub<-subset(data,column_name=="col10")
#subsetting the data
sub<-subset(data,"col10")
#subsetting the data
sub<-subset(data,col_name=="col10")
#handling missing data
data[is.na(data)]<-0
summary(data)
str(data)
sum(is.na(data))
# loading the data
data<-read.csv("C://lpu//5th sem//INT234//Datasets//Prostate_cancer.csv")
# retreiving the colnames of the data
colnames(data)
head(data)
tail(data)
#renaming the colnames
colnames(data)<-c("col1","col2","col3","col4","col5","col6","col7","col8","col9","col10","col11","col12","col13","col14","col15")
colnames(data)
#handling missing data
sum(is.na(data))  #checking for null values
data[is.na(data)]<-0
sum(is.na(data))
summary(data)
str(data)
dim(data)
names(data)
class(data$col10)
summary(data$col10)
hist(data$col10)
boxplot(data$col10)
table(data$col10)
barplot(table(data$col10))
View(data)
class(data$col2)
summary(data$col2)  #getting the statistics of a particular column
table(data$col2)  #creates a frequency table of categorical values.
barplot(table(data$col2))
data$col2<-factor(data$col2)  # converting a variable into a factor in a column
View(data)
#exploring relationships between variables
plot(data$col2,data$col3)
cor(data$col2,data$col3)
cor(data$col4,data$col3)
table(data$col2,data$col3)
boxplot(data$col3 ~ data$col2)
b1<-seq(1,30,length.out=5)   #This line creates a sequence starting from 1 to 30 with a length of 5. The resulting values in b1 will be equally spaced within the specified range. In this case, b1 will be a vector containing 1, 8.75, 16.5, 24.25, and 30.
b1
#create a vector of integer
a3<-c(-10,1,23,-5)
print(a3)
a12<-c(1,3,5,7,9,2,4,6,8,10)
a12
a12[a12>5&a12<10] #will print the elements which are b/w 5 to 10 inclusively
# list
l1<-list(c(1,1,1),c(1.0,2.0),c('a','b'))
l1
l1[3]
#nested list
l2<-list(c(1,1,1),c(1.0,2.0),list('a','b'))
l2
l2[[3]][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2
l2[3][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2[2][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2[2][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2[[2]][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2[3][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
]
l2[[3]][1]<-NULL  #only possible if it is a element in a list inside a list. if a element in a vector inside a list, it won't work and throw an error. but we can make an entire vector as NULL which is present in a list
l2
# operators
# assignment operator
a<-1
a=1
a<<-1
b<<-1
a+b
#logical operators
a<-c(1:10)
b<-c(21:30)
mat1<-matrix(a,nrow=2,ncol = 6,byrow=TRUE)
mat1<-matrix(a,nrow=2,ncol = 6,byrow=TRUE)
mat2<-matrix(b,nrow=2,ncol=6,byrow=TRUE)
mat1
mat1
mat2
mat1%*%t(mat2)  # since the multiplication will be done only if ncol=nrow
# factors
# create a factor for blood samples
lev<-c('A+','A-','B+','B-','O-','O+')
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion. this actually tells the proportion of the values present in the field
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
View(wbcd)
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion. this actually tells the proportion of the values present in the field
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion. this actually tells the proportion of the values present in the field
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
