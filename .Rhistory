data
data
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
data
data
class(data$V1)
class(data$V2)
class(data$V1)
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = FALSE, header = FALSE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = TRUE)
data
class(data$V1) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
class(data$roll_no) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
class(data$name) #gives the class as factor since we used stringsAsFactors = true. if not it will return the actual class such as int,char,etc
# accessing data from dataset
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = FALSE)
summary(data)
summary(data)
data<-read.csv(file.choose(),stringsAsFactors = TRUE, header = TRUE)
data
class(data$name)  # header = true makes the headers from the data and the accessing will be done through those names whereas in the above method, we used header=false and some random headers were given
summary(data)
table(data)
round(1.5)
table(data)
prop.table(data)
gc()
# knn algorithm
getwd()
# knn algorithm
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd)
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31]),normalize)
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
View(wbcd_n)
install.packages("class")
install.packages("gmodels")
library(class)
install.packages("caret")
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
install.packages("gmodels")
library(gmodels)
install.packages("gmodels")
library(gmodels)
install.packages("gmodels")
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
View(wbcd_n)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
library(caret)
library(gmodels)
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
confusionMatrix(aa)
install.packages("gmodels")
library(gmodels)
install.packages("gtools")
install.packages("gtools")
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=22)
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[470:569,]
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=22)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=28)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=15)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=1)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=11)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=31)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=101)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=93)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=300)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
install.packages(c("backports", "bitops", "broom", "bslib", "cachem", "cli", "colorspace", "cpp11", "crayon", "crul", "curl", "data.table", "DBI", "digest", "evaluate", "farver", "fastmap", "flextable", "gt", "highr", "htmltools", "knitr", "markdown", "NLP", "officer", "openssl", "pkgload", "ps", "ragg", "Rcpp", "reactR", "reprex", "rlang", "rmarkdown", "roxygen2", "RSQLite", "shiny", "slam", "stringi", "systemfonts", "textshaping", "tinytex", "tm", "uuid", "V8", "withr", "xfun", "XML", "xts", "yaml"))
install.packages(c("cli", "curl", "data.table"))
install.packages(c("cli", "curl", "data.table"))
install.packages(c("cli", "curl", "data.table"))
gc()
gc()
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=TRUE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
install.packages(c("cli", "curl", "data.table", "gdtools", "slam"))
irisd<-as.data.frame(iris)
str(irisd)
irisd
View(irisd)
irisd<-irisd[-1]
irisd
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
irisd
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion
round(prop.table(table(irisd$Species))*100,digits = 1)
irisd
str(irisd)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
str(irisd)
irisd_train<-irisd_n[1:109]
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
irisd_train<-irisd_n[1:109]
irisd_train<-irisd_n[1:99]
irisd_train<-irisd_n[1:99,]
irisd_test<-irisd_n[100:149,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:149,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:99,]
irisd_test<-irisd_n[100:150,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:149,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
irisd_train<-irisd_n[1:99,]
irisd_test<-irisd_n[100:150,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:99,]
irisd_test<-irisd_n[100:150,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
library(caret)
confusionMatrix(aa)
confusionMatrix(aa,)
aa
# knn algorithm considering Breast Cancer data
getwd()
wbcd<-read.csv("wisc_bc_data.csv",stringsAsFactors = FALSE)
str(wbcd) #tells the structure of the data
wbcd<-wbcd[-1] #removing the first column from the data since the ID is not useful for the anlaysis
table(wbcd$diagnosis)  #gives the count of unique strings
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wbcd)
round(prop.table(table(wbcd$diagnosis))*100,digits = 1)  # prop means proportion. this actually tells the proportion of the values present in the field
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
summary(wbcd_n$area_mean)
wbcd_train<-wbcd_n[1:469,]  #using 470 samples to train
wbcd_test<-wbcd_n[470:569,]  #using 100 samples to test
wbcd_train_labels<-wbcd[1:469,1]
wbcd_test_labels<-wbcd[470:569,1]
library(class)
wbcd_test_prepd<-knn(train = wbcd_train, test = wbcd_test,cl=wbcd_train_labels,k=21)
library(gmodels)
CrossTable(x=wbcd_test_labels,y=wbcd_test_prepd,prop.chisq=FALSE)  # this gives the details about the number of values matched and not matched while testing
aa<-table(wbcd_test_labels,wbcd_test_prepd)
library(caret)
confusionMatrix(aa)  #this tells about the accuracy of the model
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:99,]
irisd_test<-irisd_n[100:149,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:149,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:99,1]
irisd_test_labels<-irisd_n[100:149,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
irisd<-as.data.frame(iris)
str(irisd)
irisd
table(irisd$Species)
irisd$Species<-factor(irisd$Species,levels=c("setosa","versicolor","virginica"),labels = c("Setosa","Versicolor","Virginica"))
round(prop.table(table(irisd$Species))*100,digits = 1)
summary(irisd[c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
irisd_n<-as.data.frame(lapply(irisd[1:4],normalize))
summary(irisd_n)
str(irisd_n)
irisd_train<-irisd_n[1:100,]
irisd_test<-irisd_n[101:150,]
irisd_train_labels<-irisd_n[1:100,1]
irisd_test_labels<-irisd_n[101:150,1]
library(class)
irisd_test_prepd<-knn(train = irisd_train,test = irisd_test,cl=irisd_train_labels,k=25)
library(gmodels)
CrossTable(x=irisd_test_labels,y=irisd_test_prepd,prop.chisq=FALSE)
aa<-table(irisd_test_labels,irisd_test_prepd)
aa
library(caret)
confusionMatrix(aa)
